{"version":3,"sources":["components/ImageCards/ImageCards.js","components/wrapper/Wrapper.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","className","onClick","handleImageClick","id","alt","name","src","image","Wrapper","Component","children","header","score","message","App","state","images","clickedImages","randomizeImages","i","length","j","Math","floor","random","shuffledImages","setState","includes","concat","Header","title","this","map","key","handleIncrement","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6kCAkBeA,G,kBAfG,SAACC,GACjB,OACI,4BAAQC,UAAU,OAChBC,QAAU,kBAAMF,EAAMG,iBAAiBH,EAAMI,MAC3C,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCehCC,GATUC,YATT,SAACV,GACb,OACI,6BACI,yBAAKC,UAAU,WAAWD,EAAMW,aCW7BC,GAjBKF,YAQL,SAACV,GAAD,OACb,6BACI,wBAAIC,UAAU,IAAd,eACA,+DACA,uBAAGA,UAAU,IAAb,UAAwBD,EAAMa,OAC9B,2BAAIb,EAAMc,Y,OCmGDC,E,2MAvGbC,MAAQ,CACNC,SACAJ,MAAO,EACPK,cAAe,I,EAGjBC,gBAAkB,SAACF,GACjB,IAAK,IAAIG,EAAIH,EAAOI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEjB,CAACH,EAAOK,GAAIL,EAAOG,IAA3CH,EAAOG,GAFkC,KAE9BH,EAAOK,GAFuB,KAI5C,OAAOL,G,EAGTd,iBAAmB,SAAAC,GACjB,IAAMsB,EAAiB,EAAKP,gBAAgBF,GAC5C,EAAKU,SAAS,CAACV,OAAQS,IAEnB,EAAKV,MAAME,cAAcU,SAASxB,GACpC,EAAKuB,SAAS,CACZd,MAAO,EACPK,cAAe,GACfJ,QAAS,4CAIJ,EAAKE,MAAMH,MAAO,GACzB,EAAKc,SAAS,CACZT,cAAe,EAAKF,MAAME,cAAcW,OAAOzB,GAC/CS,MAAO,EAAKG,MAAMH,MAAO,EACzBC,QAAS,aAIX,EAAKa,SAAS,CACZT,cAAe,GACfL,MAAO,EACPC,QAAS,mB,wEAwBL,IAAD,OACP,OACE,kBAAC,EAAD,KAYN,kBAACgB,EAAD,CACUC,MAAM,cACNlB,MAAOmB,KAAKhB,MAAMH,MAClBC,QAASkB,KAAKhB,MAAMF,UAEtB,8BAGA,6BACKkB,KAAKhB,MAAMC,OAAOgB,KAAI,SAAAhB,GAAM,OACzB,kBAAC,EAAD,CACEiB,IAAKjB,EAAOb,GACZD,iBAAkB,EAAKA,iBACvBgC,gBAAiB,EAAKA,gBACtBhB,gBAAiB,EAAKA,gBACtBf,GAAIa,EAAOb,GACXI,MAAOS,EAAOT,iB,GA7FdE,aCGE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb33cca9.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageCards.css';\n\nconst ImageCard = (props) => {\n  return (\n      <button className=\"card\" \n        onClick={ () => props.handleImageClick(props.id)}>\n          <div className=\"img-container\">\n              <img alt={props.name} src={props.image} />\n              \n          </div>\n          \n      </button>\n  );\n}\n\n\n\nexport default ImageCard","import React, { Component } from 'react';\nimport './Wrapper.css';\nimport '../ImageCards/ImageCards';\n\n\nconst Wrapper = (props) => {\n    return (\n        <div>\n            <div className=\"wrapper\">{props.children}</div>\n        </div>\n    );\n\n};\n\nclass ImageCards extends Component {\n\n    // create click event for images to randomly change to new image\n    handleImageClick = event => {\n        event.preventDefault();\n    };\n\n};\n\nexport default Wrapper;\n\n\n\n\n\n","import React, { Component } from 'react';\n\nclass score extends Component {\n\nstate = {\n  score: 0,\n};\n\n};\n\nconst header = (props) => (\n  <div>\n      <h1 className=\"\" >Clicky Game</h1>\n      <p>Click on an image to earn points</p>\n      <p className=\"\">Score: {props.score}</p>\n      <p>{props.message}</p>\n  </div>\n)\n\nexport default header;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/wrapper/Wrapper';\nimport ImageCards from './components/ImageCards/ImageCards';\nimport Header from './components/header/Header';\nimport images from './images.json';\n\n\n\nclass App extends Component {\n\n  state = {\n    images,\n    score: 0,\n    clickedImages: [],\n  };\n\n  randomizeImages = (images) => {\n    for (let i = images.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [images[i], images[j]] = [images[j], images[i]];\n    };\n    return images;\n  };\n\n  handleImageClick = id => {\n    const shuffledImages = this.randomizeImages(images);\n    this.setState({images: shuffledImages});\n\n    if (this.state.clickedImages.includes(id)){\n      this.setState({\n        score: 0,\n        clickedImages: [],\n        message: \"You already clicked that one, try again\"\n      });\n    }\n\n    else if (this.state.score <11){\n      this.setState({\n        clickedImages: this.state.clickedImages.concat(id),\n        score: this.state.score +1,\n        message: \"Good job\"\n      });\n    }\n    else {\n      this.setState({\n        clickedImages: [],\n        score: 0,\n        message: \"Yay, you win!\"\n      });\n    }\n\n\n  };\n\n  // handleIncrement = () => {\n  //   const newScore = this.state.score + 1;\n  //   this.setState({\n  //     score: newScore,\n  //   });\n  //   if (newScore >= this.state.topScore) {\n  //     this.setState({ highScore: newScore });\n  //   } \n  //   this.randomizeImages();\n  // };\n\n\n  // handleRandom = () => {\n  //   let randomizeImages = randomizeImages(images);\n  //   this.setState({ characters: randomizeImages });\n  // };\n\n  render() {\n    return (\n      <Wrapper>\n      {/* <Header />\n\n      {\n        images.map( (image) => (\n          \n          <ImageCards \n          key={image.id}\n          image={image.image}/>\n        ))\n      } */}\n\n<Header\n          title=\"Clicky Game\"\n          score={this.state.score}\n          message={this.state.message}\n        />\n        <div>\n        </div>\n\n        <div>\n            {this.state.images.map(images => (\n                <ImageCards\n                  key={images.id}\n                  handleImageClick={this.handleImageClick}\n                  handleIncrement={this.handleIncrement}\n                  randomizeImages={this.randomizeImages}\n                  id={images.id}\n                  image={images.image}\n                />\n            ))}\n            </div>\n\n    </Wrapper>\n    )}\n\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}